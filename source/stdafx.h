// stdafx.h : 자주 사용하지만 자주 변경되지는 않는
// 표준 시스템 포함 파일 및 프로젝트 관련 포함 파일이 
// 들어 있는 포함 파일입니다.
//

#pragma once

 
#define WIN32_LEAN_AND_MEAN		// 거의 사용되지 않는 내용은 Windows 헤더에서 제외합니다.

// Windows 헤더 파일입니다.
#include <windows.h>
// C의 런타임 헤더 파일입니다.
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <tchar.h>

// TODO: 프로그램에 필요한 추가 헤더는 여기에서 참조합니다.
// C RunTime Header Files
#include <stdlib.h>
#include <malloc.h>
#include <mmsystem.h>
#include <memory.h>
#include <tchar.h>
#include <winsock2.h>
#include <strsafe.h>
// Local Header Files


// Turn off warnings generated by long std templates
// This warns about truncation to 255 characters in debug/browse info
#   pragma warning(disable:4786)

// disable: "conversion from 'double' to 'float', possible loss of data
#   pragma warning(disable:4244)

// disable: "truncation from 'double' to 'float'
#   pragma warning(disable:4305)

// disable: "<type> needs to have dll-interface to be used by clients'
// Happens on STL member variables which are not public therefore is ok
#   pragma warning(disable:4251)

// disable: "non dll-interface class used as base for dll-interface class"
// Happens when deriving from Singleton because bug in compiler ignores
// template export
#   pragma warning(disable:4275)

// disable: "C++ Exception Specification ignored"
// This is because MSVC 6 did not implement all the C++ exception 
// specifications in the ANSI C++ draft.
#   pragma warning(disable:4290)

// disable: "no suitable definition provided for explicit template 
// instantiation request" Occurs in VC7 for no justifiable reason on all 
// #includes of Singleton
#   pragma warning(disable:4661)

// for <strsafe.h>
#	pragma warning(disable:4995)

#include <cassert>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cstdarg>
#include <cmath>
#include <atldbcli.h>
// STL containers
#include <vector>
#include <map>
#include <string>
#include <set>
#include <list>
#include <deque>

// STL algorithms & functions
#include <algorithm>
#include <functional>
#include <utility>
#include <limits>

// TODO: reference additional headers your program requires here
#include "../iocpSocketDLL/iocpSocketDLL.h"
#include "../include/Log.h"
#include "../../extra/LS_HTTP/LS_HTTP/ioHTTP.h"
#include "FrameTimerDLL/CFrameTimer.h"
#include "../include/cSingleton.h"

#include "Util/ioHashString.h"
#include "Define.h"
#include "Protocol.h"
#include "../ioINILoader/ioINILoader.h"
#include "Network/SP2Packet.h"
#include "NodeInfo/MemInfoManager.h"
#include "NodeInfo/BillInfoManager.h"
#include "NodeInfo/UserInfoManager.h"
/************************************************************************/
/* ServerNode                                                                     */
/************************************************************************/
#include "NexonServer/NexonSessionServer.h"
#include "WemadeBillingServer/WemadeBuyServer.h"
#include "MgameBillingServer/MgameBillingServer.h"
#include "ToonilandBillingServer/ToonilandBillingServer.h"

/************************************************************************/
/* ChannelingNode                                                                     */
/************************************************************************/
#include "Channeling/ioChannelingNodeMgame.h"
#include "Channeling/ioChannelingNodeDaum_v2.h"
#include "Channeling/ioChannelingNodeDaum.h"
#include "Channeling/ioChannelingNodeNaver.h"
#include "Channeling/ioChannelingNodeTooniland.h"
#include "Channeling/iochannelingNodeWemadeBuy.h"
#include "Channeling/ioChannelingNodeNexonBuy.h"
#include "Channeling/ioChannelingNodeWemadeCashLink.h"
#include "Channeling/ioChannelingNodeNexonBuy_v2.h"
#include "Channeling/ioChannelingNodeHangame.h"

/************************************************************************/
/* operation 관련                                                                      */
/************************************************************************/
#include "BaseClass/Handler.h"
#include "BaseClass/Operation.h"
//#include "../NodeInfo/MemInfoManager.h"
//#ifdef _DEBUG
//	#pragma comment(lib, "FrameTimerDLL/FrameTimerDLLD.lib")
//	#pragma comment(lib, "../iocpSocketDLL/bin/iocpSocketDDLL.lib")
//	#pragma comment(lib, "../Log_Sync/bin/logddll.lib")
//	#pragma comment(lib, "XML/tinyxmld.lib")
//	#pragma comment(lib, "../ioWinhttp/bin/ioWinhttpd.lib")
//#else
//	#pragma comment(lib, "FrameTimerDLL/FrameTimerDLL.lib")
//	#pragma comment(lib, "../iocpSocketDLL/bin/iocpSocketDLL.lib")
//	#pragma comment(lib, "../Log_Sync/bin/logdll.lib")
//	#pragma comment(lib, "XML/tinyxml.lib")
//	#pragma comment(lib, "../ioWinhttp/bin/ioWinhttp.lib")
//#endif

/************************************************************************/
/* Login                                                                     */
/************************************************************************/
#define LOG_DEBUG_LEVEL 0

/************************************************************************/
/* PacketGuard                                                                     */
/************************************************************************/

#define PACKET_GUARD_VOID(x)	{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); return; } }
#define PACKET_GUARD_INT(x)		{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); return -1; } }
#define PACKET_GUARD_BOOL(x)	{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); return FALSE; } }
#define PACKET_GUARD_bool(x)	{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); return false; } }
#define PACKET_GUARD_BREAK(x)	{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); break; } }
#define PACKET_GUARD_BOOL(x)	{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); return FALSE; } }
#define PACKET_GUARD_NULL(x)	{ BOOL rtval = x; if( (rtval)==FALSE ) { LOG.PrintTimeAndLog(0,"[PACKET_GUARRD_ERROR] %s::%s",__FUNCTION__,#x); return NULL; } }